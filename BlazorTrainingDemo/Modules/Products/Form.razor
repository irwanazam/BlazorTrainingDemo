@page "/products/form/{id:int?}"

<!--Dependency Injection-->
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager
@inject IMediator mediator

@rendermode InteractiveServer

<PageTitle>@(IsEditMode ? "Edit Product" : "Create Product")</PageTitle>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit" FormName="product">
    <DataAnnotationsValidator />
    <FluentValidationSummary />

    <FluentTextField Name="Name" @bind-Value="product.Name" label="Name" />

    <FluentTextField Name="Name" @bind-Value="product.Code" label="Code" />

    <FluentTextField Name="Name" @bind-Value="product.Description" label="Description" />

   @*  <FluentNumberField  Name="Price" @bind-Value="product.Price" label="Price"/> *@

    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    public string ErrorMessage { get; set; }

    //[SupplyParameterFromForm] - Use SupplyParameterFromForm to bind the form data to the model as set and get property
    //private Product? product = new Product();
    private Product? product { set; get; }

    private bool IsEditMode => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            product = await context.Products.FindAsync(Id);
        }
        else
        {
            product = new Product();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsEditMode)
            {
                await mediator.Send(new UpdateProductCommand(product));
            }
            else
            {
                //DomainEvent - Event Bus
                await mediator.Send(new CreateProductCommand(product));
            }
             NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            //Log the exception
            //Show the error message
            ErrorMessage = ex.Message;
        }
       
        
    }
}